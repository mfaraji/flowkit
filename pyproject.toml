[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "flowkit"
version = "0.1.0"
description = "A comprehensive Python SDK for personal utility tools"
authors = ["Your Name <your.email@example.com>"]
maintainers = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/yourusername/flowkit"
repository = "https://github.com/yourusername/flowkit.git"
documentation = "https://flowkit.readthedocs.io/"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
requests = "^2.28.0"
click = "^8.0.0"
pydantic = "^2.0.0"
python-dateutil = "^2.8.0"
pytz = "^2023.3"
pathlib2 = "^2.3.0"
pandas = "^2.0.0"
openpyxl = "^3.1.0"
PyYAML = "^6.0"
cryptography = "^41.0.0"
bcrypt = "^4.0.0"
psutil = "^5.9.0"
watchdog = "^3.0.0"
httpx = "^0.24.0"
aiohttp = "^3.8.0"
python-dotenv = "^1.0.0"
loguru = "^0.7.0"
# Google APIs
google-api-python-client = "^2.0.0"
google-auth-httplib2 = "^0.1.0"
google-auth-oauthlib = "^0.8.0"
# Atlassian APIs
jira = "^3.5.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
black = "^23.0"
flake8 = "^6.0"
mypy = "^1.0"
pre-commit = "^3.0"
isort = "^5.12.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^5.0"
sphinx-rtd-theme = "^1.0"
myst-parser = "^0.18"

[tool.poetry.scripts]
flowkit = "src.cli:main"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 